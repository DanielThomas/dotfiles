[include]
    path = .gitconfig_local
[core]
    excludesfile = /Users/dannyt/.gitignore_global
    pager = "diff-so-fancy | less --tabs=4 -RFX"
[diff-so-fancy]
    markEmptyLines = false
	first-run = false
[color]
	ui = true
[credential]
    helper = osxkeychain
[push]
    default = current
[merge]
    ff = only
[pull]
    default = current
	ff = only
[rebase]
    autosquash = true
[alias]
    aliases = config --get-regexp alias 

    # common commands
    ai = add --interactive

    s = status -s
    st = status -s

    cl = clone

    c = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    commend = commit --amend --no-edit
    
    pm = push origin master
    ppm = !git pull --rebase && git push origin master
    mppm = !git checkout master && git merge develop master && git ppm && git checkout develop
    ppd = !git pull --rebase && git push origin develop
    please = push --force-with-lease
    purr = pull --rebase
    pt = !sh -c 'git tag $1 && git push --atomic origin $(git branch --show-current) $1' -
    
    cl = clean
    clb = !git branch -d $(git branch --merged | sed '/master/d' | sed '/*/d') && git remote prune origin

    co = checkout
    br = branch
    bra = branch -ra
    sw = switch

    # list commands
    le = log --oneline --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --stat
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    lg = log --graph --oneline --decorate --all
    grog = log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"

    #list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    diff = diff --word-diff
    d = diff --word-diff
    dc = diff --cached
    
    #list modified files in last commit
    dl = "!git ll -1"
    
    #diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    branch = branch -ra

    #reset commands
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    #grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    #grep on filename
    f = "!git ls-files | grep -i"

    #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    #assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    
    #show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"

    #unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    #merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #grumble
    ffs = "!git all && git commit --amend"

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
